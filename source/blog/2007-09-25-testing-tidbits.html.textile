---
permalink: testing-tidbits
updated_at: 2007-09-25 22:33:35 +00:00
guid: 61189aa5-4796-4257-9c98-93b989eb2605
title: Testing tidbits
id: 291
filter:
- erb
- textile
categories: []

created_at: 2007-09-25 22:22:23 +00:00
keywords: anything matcher rake test unit options verbose testopts
---
A couple of useful nuggets came up while I was "pair programming":http://c2.com/cgi/wiki?PairProgramming with "James":http://interblah.net/ today.

Firstly, James had an interesting new use of the Mocha parameter matcher "@anything@":http://mocha.rubyforge.org/classes/Mocha/ParameterMatchers.html#M000009, which reminded me of "Joe Walnes":http://joe.truemesh.com/ and his "Flexible JUnit assertions with assertThat()":http://joe.truemesh.com/blog//000511.html.

Normally @anything@ is used to determine what parameters are matched by an expectation...

bc(prettyprint). Product.expects(:do_stuff).with('name', anything)

But James was passing @anything@ into a method to indicate that the value of that parameter was irrelevant in the context of the test. The kind of thing you might already do using @nil@...

bc(prettyprint). Product.do_stuff('name', anything)

I wonder if this idea could be extended by having a kind of "holy hand-grenade":http://www.youtube.com/watch?v=Kk-G2twc_M4 object which "blows up" by raising an "@AssertionFailedError@":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/classes/Test/Unit/AssertionFailedError.html when any method is invoked on it...?

Secondly, we were running all our tests using the default rake task when we discovered a test that was hanging. The standard rake test task output wasn't very helpful in identifying which test was stuck (just rows of dots)...

bc. Started
.....................................................................
.....................................................................
.....................................................................
......................................................

Interrupting the process and examining the stack trace didn't help either (the relevant stack frames had been collapsed)...

bc. ... 24 levels...
from /opt/local/lib/ruby/1.8/test/unit/autorunner.rb:216:in `run'
from /opt/local/lib/ruby/1.8/test/unit/autorunner.rb:12:in `run'
from /opt/local/lib/ruby/1.8/test/unit.rb:278
from /opt/local/lib/ruby/gems/1.8/gems/rake-0.7.3/lib/rake/...

So we set the output to verbose which outputs the name of each test as it starts. From this we could work out which was the offending test...

bc.. $ TESTOPTS="-v" rake
test_should_do_something(NaughtyTest): .
test_should_do_something_else(NaughtyTest): .
test_should_do_something_ideally_without_hanging(NaughtyTest): .
