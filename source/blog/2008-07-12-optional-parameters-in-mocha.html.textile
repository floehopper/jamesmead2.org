--- 
permalink: optional-parameters-in-mocha
updated_at: 2008-07-12 11:33:16 +00:00
guid: 3c633209-7be1-41ed-8b4e-a74caec54401
title: Optional Parameters in Mocha
id: 328
filter:
- erb
- textile
categories: []

created_at: 2008-07-12 11:30:03 +00:00
keywords: mocha mock stub parameter option
---
One of the "new features":/blog/2008-06-24-mocha-0-9-released added in "Mocha":http://gofreerange.com/mocha/docs/ 0.9 is the ability to specify the values of optional parameters without requiring them to be present. Some examples should make this clearer...

Let's assume we're trying to set up an expectation for the invocation of a method which has some parameters with default values...

bc(prettyprint). def my_method(one, two, three = 3, four = 4)
  # implementation
end

We can use the new "Mocha::ParameterMatchers#optionally":http://mocha.rubyforge.org/classes/Mocha/ParameterMatchers.html#M000024 method within the call to "Expectation#with":http://mocha.rubyforge.org/classes/Mocha/Expectation.html#M000042 as follows...

bc(prettyprint). object = mock('object')
object.expects(:my_method).with(1, 2, optionally(3, 4))

This specifies that we are expecting an invocation of @my_method@. As usual, the first two _required_ parameters (@one@ & @two@) must have values @1@ & @2@ respectively. However, the last two _optional_ parameters (@three@ & @four@) only have to have the values @3@ & @4@ respectively if they are supplied.

So any of the following invocations would satisfy the expectation...

bc(prettyprint). object.my_method(1, 2)
object.my_method(1, 2, 3)
object.my_method(1, 2, 3, 4)

Whereas none of the following invocations would satisfy the expectation and an error would be raised...

bc(prettyprint). object.my_method(1)
object.my_method(1, 3)
object.my_method(1, 2, 4)
object.my_method(1, 2, 4, 4)
object.my_method(1, 2, 3, 5)
