---
permalink: activerecord-model-class-name-clash
updated_at: 2009-11-02 16:23:13 +00:00
guid: 241da9d4-d57a-4197-bc68-74dfa03cc09c
title: ActiveRecord Model Class Name Clash
description: Validation weirdness with a class called Sync.
id: '389'
categories: []

created_at: 2009-11-02 16:21:44 +00:00
keywords: activerecord model class validation twice callback collision clash
---
I've just spent way too long trying to work out why the validation callbacks were getting called twice on one of my "ActiveRecord":http://api.rubyonrails.org/classes/ActiveRecord/Base.html models. I thought I'd write this up in case it saves someone else some pain.

In the end, I narrowed the problem down to the name of the model class which is @Sync@. I should've thought of this sooner, but it turns out there is a Ruby standard library class called "@Sync@":http://ruby-doc.org/stdlib/libdoc/sync/rdoc/index.html. I haven't delved any further into why validation was being called twice. As far as I'm concerned, once you re-open an existing Ruby class like this, it makes sense that all bets are off.

However, I am a bit confused why the original Sync model class definition didn't give a "superclass mismatch" "@TypeError@":http://ruby-doc.org/core/classes/TypeError.html, which is what happens if I do :-

bc. script/runner "class Sync < ActiveRecord::Base; end"

It must be a load order issue, since if I put the class definition in a file in app/models, I don't see the @TypeError@. It would've saved a lot of time if my @Sync@ model class definition had failed fast in this way. I might see if there's a way to make that happen.
