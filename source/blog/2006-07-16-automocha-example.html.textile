--- 
permalink: automocha-example
updated_at: 2006-08-10 17:08:14 +00:00
guid: 047345b6-c9e3-4929-9c16-1f810db0c371
title: AutoMocha example
id: 17
filter:
- erb
- textile
categories: []

created_at: 2006-07-16 19:01:00 +00:00
keywords: mock mocking stub stubbing ruby class method expectation test testing dependency rails
---
Again - I'm not really very pleased with this example, but hopefully it makes some sense. It's important to realise that the test is not running in a normal "Rails":http://www.rubyonrails.org environment with the standard auto-require. In fact the first time the Comment class is encountered AutoMocha uses const_missing to supply a Mocha::Mock in its place. From that point on - any further references get the same mock object.

bc(prettyprint).. class Article

    attr_reader :id

    def accepted_comments
      Comment.find_all_by_article_id(self.id).select { |comment| comment.accepted? }
    end

  end

  require 'rubygems'
  require 'auto_mocha'
  require 'test/unit'

  class OrderTest < Test::Unit::TestCase

    include Mocha

    # illustrates stubbing of previously undefined class Comment
    def test_should_return_accepted_comments_for_this_article
      unaccepted_comment = Mock.new(:accepted? => false)
      accepted_comment = Mock.new(:accepted? => true)
      comments = [unaccepted_comment, accepted_comment]
      Comment.stubs(:find_all_by_article_id).returns(comments)
      article = Article.new
      assert_equal [accepted_comment], article.accepted_comments
    end

  end
