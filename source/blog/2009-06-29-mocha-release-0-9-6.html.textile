--- 
permalink: mocha-release-0-9-6
updated_at: 2009-06-29 16:29:54 +00:00
guid: 7ad172d1-6afc-4867-9f2d-8a5259c6509d
title: Mocha Release 0.9.6
id: '378'
filter:
- erb
- textile
categories:
- mocha_release
created_at: 2009-06-29 16:29:54 +00:00
keywords: mocha mock stub ruby testing tdd
---
h2. Release Notes

* Version 2.0.1 of the "test-unit gem":http://test-unit.rubyforge.org/ introduced a private @run_test@ method on @TestCase@ which clashed with the public @TestRunner#run_test@ method. So this latter method has been renamed to @run_as_test@.
* Stop requiring @rubygems@ - this should be an environmental choice for the user. "This":http://gist.github.com/54177 describes why requiring @rubygems@ in your library code is a bad idea.
* It seems like overkill to vendorize @coderay@ and @meta_project@ when they're only needed to generate the examples for documentation and for publishing files on "RubyForge":http://rubyforge.org/. So I'm removing them and installing them locally as gems when I need them.
* Added support for "test-unit gem":http://test-unit.rubyforge.org/ (version >= 2.0). Note that as with other versions of "Test::Unit":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html I'm completely replacing the @TestCase#run@ method. Unfortunately in version 2.0.0 this method differs slightly from the same method in version 2.0.1 & 2.0.2, so we have to provide different implementations to ensure that the internal working of "Test::Unit":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html are not compromised by "Mocha":http://gofreerange.com/mocha/docs/. Note also that unless the "test-unit gem":http://test-unit.rubyforge.org/ is loaded, requiring @'test/unit'@ leads to a mixture of standard library and gem classes being loaded causing errors. To avoid a dependency on @rubygems@, the gem is loaded only if @MOCHA_OPTIONS@ is set to @use_test_unit_gem@ - this option is only intended for use in running "Mocha's":http://gofreerange.com/mocha/docs/ own tests. It might be worthwhile to create a shim gem like @minitest_tu_shim@ to allow the "test-unit gem":http://test-unit.rubyforge.org/ to completely replace the standard library, but that's a job for another day. "My previous article on Test::Unit and MiniTest":/blog/2009-02-02-test-unit-and-minitest-with-different-ruby-versions#minitest-tu-shim explains how the @minitest-tu-shim@ works. The changes in the @Rakefile@ are to make the default task run with the "test-unit gem":http://test-unit.rubyforge.org/ (version >= 2.0).
* Renamed @Mocha::Standalone@ to "Mocha::API":http://mocha.rubyforge.org/classes/Mocha/API.html to better reflect its purpose. Added a deprecation warning for those who are referencing @Mocha::Standalone@.
* Fix exception raised by "HasEntry#matches?":http://mocha.rubyforge.org/classes/Mocha/ParameterMatchers.html#M000015 when first parameter is not a @Hash@ (thanks to "Taylor Barstow":http://taylorbarstow.com/).
* "Ken Collins":http://www.metaskills.net/ "reported":http://rails.lighthouseapp.com/projects/8994-ruby-on-rails/tickets/2060 that "Mocha":http://gofreerange.com/mocha/docs/ is always loading "MiniTest":http://blog.zenspider.com/minitest/ if it is available and loading it causes some @Rails@/@ActionPack@ tests to break. I've removed the loading of "MiniTest":http://blog.zenspider.com/minitest/, but this now means the user has to ensure that if they want to use "MiniTest":http://blog.zenspider.com/minitest/ in conjunction with "Mocha":http://gofreerange.com/mocha/docs/, he must load "MiniTest":http://blog.zenspider.com/minitest/ before loading "Mocha":http://gofreerange.com/mocha/docs/.
* Implemented "Bacon":http://github.com/chneukirchen/bacon/ integration (thanks to "Ubiratan Pires Alberton":http://github.com/Bira), but this was then removed after deciding only to maintain integration with "Test::Unit":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html and "MiniTest":http://blog.zenspider.com/minitest/ which are both Ruby standard libraries. See "mailing list message":http://groups.google.com/group/mocha-developer/t/f01e55656e365567 for details.
* Don't monkey-patch "MiniTest":http://blog.zenspider.com/minitest/ if it's already been monkey-patched by "Mocha":http://gofreerange.com/mocha/docs/.
* Fixed "bug":http://floehopper.lighthouseapp.com/projects/22289-mocha/tickets/41 - "MiniTest":http://blog.zenspider.com/minitest/ integration was counting @ExpectationErrors@ as errors not failures.
* Fixed "bug":http://floehopper.lighthouseapp.com/projects/22289-mocha/tickets/43 - Some "Bacon":http://github.com/chneukirchen/bacon/ tests were failing in "Ruby 1.9.1":http://www.ruby-lang.org/en/news/2009/01/30/ruby-1-9-1-released/.
* "Chad Humphries":http://spicycode.com/ pointed out that in "Ruby 1.9.1":http://www.ruby-lang.org/en/news/2009/01/30/ruby-1-9-1-released/, if you are not using "Test::Unit":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html or "MiniTest":http://blog.zenspider.com/minitest/, "Mocha":http://gofreerange.com/mocha/docs/ will attempt to load and monkey-patch "Test::Unit":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html. "Mocha":http://gofreerange.com/mocha/docs/ will now only monkey-patch "Test::Unit":http://www.ruby-doc.org/stdlib/libdoc/test/unit/rdoc/index.html and/or "MiniTest":http://blog.zenspider.com/minitest/ if they have already been loaded. "MiniTest":http://blog.zenspider.com/minitest/ tests will now run in both Ruby 1.8.6 (with "MiniTest":http://blog.zenspider.com/minitest/ gem) and in "Ruby 1.9.1":http://www.ruby-lang.org/en/news/2009/01/30/ruby-1-9-1-released/ (with "MiniTest":http://blog.zenspider.com/minitest/ standard library). See "Lighthouse ticket":http://floehopper.lighthouseapp.com/projects/22289/tickets/49.
* Made "Mocha":http://gofreerange.com/mocha/docs/ compatible with minitest 1.4.0 and above (thanks to "Denis Defreyne":http://stoneship.org/).
