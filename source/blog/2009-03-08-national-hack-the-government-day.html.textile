--- 
permalink: national-hack-the-government-day
updated_at: 2009-11-26 12:52:03 +00:00
guid: a1307b14-14dc-49c0-ab06-d8212a29d2a9
title: National Hack the Government Day
description: Paul Battley & I attempt to make the website for the Office for National Statistics more useful.
id: 374
filter:
- erb
- textile
categories: []

created_at: 2009-03-08 11:06:53 +00:00
keywords: "hack uk government rewiredstate guardian greasemonkey jquery "
---
I spent yesterday in the "shiny new Guardian offices":http://www.guardian.co.uk/media/gallery/2008/dec/15/theguardian-pressandpublishing at "Rewired State":http://rewiredstate.org/ - National Hack the Government Day - which was a lot of fun, despite the "early start":http://twitter.com/floehopper/status/1291802649. There was a really friendly atmosphere and lots of interesting "projects":http://projects.rewiredstate.org/ going on.

h2. ONS Graphs

I teamed up with "Paul":http://po-ru.com/ to work on some improvements for the "Office for National Statistics website":http://www.statistics.gov.uk/. We'd noticed that while there are many "timeline datasets":http://www.statistics.gov.uk/statbase/tsdtimezone.asp available on the site, the only way to view graphs of the data is to download a Windows application called "Navidata":http://www.statistics.gov.uk/statbase/Navidata.asp. Although it's free, this application is pretty clunky and hard to use and doesn't generate very clear graphs. Also, rather obviously, it isn't much use to Mac or Linux users.

*Update:* More about our hack from Paul - "GreaseMonkey vs the ONS at Rewired State":http://po-ru.com/diary/greasemonkey-vs-the-ons-at-rewired-state/

So for the first part of our hack, in a fine example of "post-modern programming":http://www.postmodernprogramming.org/, we decided to use JavaScript to generate a graph in the browser using the HTML table form of the data. Thanks to an "article by Rebecca Murphey":http://blog.rebeccamurphey.com/2007/12/17/graph-table-data-jquery-flot/, we decided to use "jQuery":http://jquery.com/ together with Rebecca's "graphTable":http://plugins.jquery.com/files/jquery.graphTable-0.2.js.txt jQuery plugin which uses the "flot":http://code.google.com/p/flot/ jQuery plugin to actually draw the graphs. We used the "GreaseMonkey":https://addons.mozilla.org/firefox/addon/748, the Firefox add-on, to write a "little script":http://github.com/threedaymonk/ons_graphs/ to pull everything together.

Here's an example of a graph generated by the GreaseMonkey script :-

<img src="http://farm4.static.flickr.com/3639/3335553400_daeb0392d1_d.jpg" />

So now anyone can use this script to view graphs of ONS timeline datasets :-

* Get "Firefox":http://getfirefox.com/
* Install "GreaseMonkey":https://addons.mozilla.org/firefox/addon/748
* Install "ons_graphs.user.js":http://github.com/threedaymonk/ons_graphs/raw/3ff8362c76e3dc82e94857cd255d244af1174f78/ons_graphs.user.js
* Browse to a "timeline dataset":http://www.statistics.gov.uk/statbase/tsdtimezone.asp, View Table, View Series, Add to Selection, Download then View On-Screen.

Paul presenting our hack at the end of the day :-

<img src="http://farm4.static.flickr.com/3360/3336023889_96e9526bdc_d.jpg" />

h2. ONS Navigation

For the second part of our hack, we wanted to make a better way of navigating to the datasets. The current system uses a series of forms in a "wizard-like":http://is.gd/mnk1 experience which is quite hard to understand. Also, because of the form submissions (i.e. HTTP POSTs) required to access the datasets, there are no permanent URLs available to navigate directly to a dataset. We decided to try to remedy this by using "Mechanize":http://mechanize.rubyforge.org/mechanize/ to scrape the timeline data from the website and then build a simplified static website using only links (i.e. HTTP GETs). However, we hit a snag in automatically submitting the last form in the wizard and ran out of time. I might try and have a go at this in the future if I get time.

We did notice that this last form had a hidden field containing what appeared to by a SQL query, making it ripe for "SQL injection attack":http://en.wikipedia.org/wiki/SQL_injection, but fortunately we managed to restrain ourselves.

Thanks to "Ben Dodson":http://bendodson.com/ & "Paul Battley":http://po-ru.com/ for the photos.
