--- 
permalink: mocha-quickstart
updated_at: 2006-09-01 14:46:41 +00:00
guid: bcb447d0-e449-4fc0-8f14-c285d0b5e618
title: Mocha Quickstart
id: 71
filter: 
- erb
- textile
categories: []

created_at: 2006-09-01 14:14:32 +00:00
keywords: ruby mock rails stub testing interception class instance quickstart tutorial
---
I really must get round to writing some better documentation for "Mocha":http://gofreerange.com/mocha/docs/, but in the meantime here's a quickstart guide[1].

Mocha adds a couple of new methods to all objects and classes - @expects@ which sets up auto-verified expectations and @stubs@ which stubs the method allowing any number of calls.

Both the @expects@ and @stubs@ methods actually return an "expectation":http://gofreerange.com/mocha/docs/Mocha/Expectation.html object. Relevant methods on an expectation are: @at_least@, @at_least_once@, @never@, @raises@, @returns@, @times@, @with@, @yields@ which are hopefully fairly self-explanatory. If not there are some clues "here":http://gofreerange.com/mocha/docs/Mocha/Expectation.html

h2. Mocking a class method

bc(prettyprint). product = Product.new
Product.expects(:find).with(1).returns(product)
assert_equal product, Product.find(1)

h2. Mocking an instance method on a real object

bc(prettyprint). product = Product.new
product.expects(:save).returns(true)
assert product.save

h2. Stubbing instance methods on real object

bc(prettyprint). prices = [stub(:pence => 1000), stub(:pence => 2000)]
product = Product.new
product.stubs(:prices).returns(prices)
assert_equal [1000, 2000], product.prices.collect {|p| p.pence}

h2. Stubbing an instance method on all instances of a class

bc(prettyprint). Product.any_instance.stubs(:name).returns('stubbed_name')
product = Product.new
assert_equal 'stubbed_name', product.name

h2. Traditional mocking

bc(prettyprint).. object = mock()
object.expects(:expected_method).with(:p1, :p2).returns(:result)
assert_equal :result, object.expected_method(:p1, :p2)

h2. Shortcuts

bc(prettyprint). object = stub(:method1 => :result1, :method2 => :result2)
assert_equal :result1, object.method1
assert_equal :result2, object.method2

fn1. I wrote these examples without checking them, so there may be some typos.
